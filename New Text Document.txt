from database.operations.chess_com_api import download_months 

from database.operations.format_games import format_and_insert_games,get_just_new_games
from database.operations.players import insert_player
from database.database.engine import init_db
from constants import *
from database.database.ask_db import (open_request,
                                    get_ask_connection,
                                    delete_all_tables,
                                    get_players_already_in_db)

init_db(CONN_STRING)

insert_player({"player_name":"Pat_Buchanan".lower()})
get_players_already_in_db(('hikaru','magnus'))

load_dotenv('this_is_not_an_env.env')
player_name = "Pat_Buchanan".lower()
no_parallel = download_months(player_name, [(2024,'09'),
                                           (2023,'09'),
                                           (2022,'09')], parallel=False)

format_and_insert_games(no_parallel,player_name)





def get_start_and_end_date(game,game_for_db):
    game_date = get_pgn_item(game['pgn'], item='Date').split('.')
    
    game_for_db['year'] = int(game_date[0])
    game_for_db['month'] = int(game_date[1])
    game_for_db['day'] = int(game_date[2])
    
    game_start = get_pgn_item(game['pgn'], item='StartTime').split(':')
    game_for_db['hour'] =  int(game_start[0])
    game_for_db['minute'] = int(game_start[1])
    game_for_db['second'] = int(game_start[2])

    game_start = datetime(year = game_for_db['year'],
                         month = game_for_db['month'],
                         day = game_for_db['day'],
                         hour = game_for_db['hour'],
                         minute = game_for_db['minute'],
                         second = game_for_db['second'])
    
    game_end_date = get_pgn_item(game['pgn'], item='EndDate').split('.')
    game_for_db['end_year'] = int(game_end_date[0])
    game_for_db['end_month'] = int(game_end_date[1])
    game_for_db['end_day'] = int(game_end_date[2])
    game_end_time = get_pgn_item(game['pgn'], item='EndTime').split(':')
    game_for_db['end_hour'] = int(game_end_time[0])
    game_for_db['end_minute'] = int(game_end_time[1])
    game_for_db['end_second'] = int(game_end_time[2])

    game_end = datetime(
                year= game_for_db['end_year'],
        month = game_for_db['end_month'],
        day = game_for_db['end_day'],
        hour = game_for_db['end_hour'],
        minute = game_for_db['end_minute'],
        second =game_for_db['end_second']
    )

    game_for_db['time_elapsed'] = (game_end - game_start).seconds
    return game_for_db
def get_black_and_white_data(game, game_for_db):
    game_for_db['black'] = game['black']['username'].lower()
    game_for_db['black_elo'] = int(game['black']['rating'])
    game_for_db['black_result'] = game['black']['result'].lower()
    
    game_for_db['white'] = game['white']['username'].lower()
    game_for_db['white_elo'] = int(game['white']['rating'])
    game_for_db['white_result'] = game['white']['result'].lower()
    return game_for_db
def create_game_dict(game):
    n_moves, moves_data = get_moves_data(game)
    
    game_for_db = dict()
    game_for_db['link'] = game['url']   
    
    game_for_db = get_start_and_end_date(game, game_for_db)
    game_for_db = get_black_and_white_data(game, game_for_db)
    
    
    game_for_db['time_control']  = game['time_control']
    game_for_db['eco']  = game['eco']
    game_for_db['n_moves']  = n_moves
    game_for_db['moves_data']  = moves_data
    return game_for_db


def get_time_bonus(game):
    time_control = game['time_control']
    if "+" in time_control:
        return int(time_control.split("+")[-1])
    return 0
def get_n_moves(raw_moves):
    return max(
        [
            int(x.replace(".", ""))
            for x in raw_moves.split()
            if x.replace(".", "").isnumeric()
        ]
    )
def create_moves_table(
                times: list,
                clean_moves: list,
                n_moves: int,
                time_bonus: int) -> dict[str]:

    ordered_times = np.array(times).reshape((-1, 2))
    ordered_moves = np.array(clean_moves).reshape((-1, 2))
    white_times = pd.Series(
        [
            pd.Timedelta(str(str_time)).total_seconds()
            for str_time in ordered_times[:, 0]
        ]
    )
    black_times = pd.Series(
        [
            pd.Timedelta(str(str_time)).total_seconds()
            for str_time in ordered_times[:, 1]
            if str_time != "-"
        ]
    )
    white_cumsub = white_times.sub(white_times.shift(-1)) + time_bonus
    black_cumsub = black_times.sub(black_times.shift(-1)) + time_bonus

    result = {
        
        "white_moves": ordered_moves[:, 0],
        "white_reaction_times": white_cumsub,
        "white_time_left": white_times,
        "black_moves": ordered_moves[:, 1],
        "black_reaction_times": black_cumsub,
        "black_time_left": black_times,

        # "moves": "".join([str(x) + " " for x in range(1, n_moves + 1)])[:-1],
        # "white_moves": "".join([str(x) + " " for x in ordered_moves[:, 0]])[:-1],
        # "white_reaction_times": "".join([str(x) + " " for x in white_cumsub])[:-1],
        # "white_time_left": "".join([str(x) + " " for x in white_times])[:-1],
        # "black_moves": "".join([str(x) + " " for x in ordered_moves[:, 1]])[:-1],
        # "black_reaction_times": "".join([str(x) + " " for x in black_cumsub])[:-1],
        # "black_time_left": "".join([str(x) + " " for x in black_times])[:-1],
    }
    return result
def get_moves_data(game: str) -> tuple:
    time_bonus = get_time_bonus(game)
    raw_moves = (
        game['pgn'].split("\n\n")[1]
        .replace("1/2-1/2", "")
        .replace("1-0", "")
        .replace("0-1", "")
    )
    n_moves = get_n_moves(raw_moves)
    times = [x.replace("]", "").replace("}", "") for x in raw_moves.split() if ":" in x]
    just_moves = re.sub(r"{[^}]*}*", "", raw_moves)
    clean_moves = [x for x in just_moves.split() if "." not in x]
    if not f"{n_moves}..." in raw_moves:
        clean_moves.append("-")
        times.append("-")
    moves_data = create_moves_table(times,
                                    clean_moves,
                                    n_moves,
                                    time_bonus,
                                    )
    return n_moves, moves_data
    #return times, clean_moves, n_moves, time_bonus, just_moves